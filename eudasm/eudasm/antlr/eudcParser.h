/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : antlr\\eudc.g
 *     -                            On : 2014-04-02 22:54:49
 *     -                for the parser : eudcParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
eudcParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef peudcParser, which is returned from a call to eudcParserNew().
 *
 * The methods in peudcParser are  as follows:
 *
 *  - 
 eudcParser_statement_return
      peudcParser->statement(peudcParser)
 *  - 
 eudcParser_block_return
      peudcParser->block(peudcParser)
 *  - 
 eudcParser_fdecl_statement_return
      peudcParser->fdecl_statement(peudcParser)
 *  - 
 eudcParser_fdef_statement_return
      peudcParser->fdef_statement(peudcParser)
 *  - 
 eudcParser_argdef_return
      peudcParser->argdef(peudcParser)
 *  - 
 eudcParser_vardecl_statement_return
      peudcParser->vardecl_statement(peudcParser)
 *  - 
 eudcParser_vardecl_return
      peudcParser->vardecl(peudcParser)
 *  - 
 eudcParser_if_statement_return
      peudcParser->if_statement(peudcParser)
 *  - 
 eudcParser_while_statement_return
      peudcParser->while_statement(peudcParser)
 *  - 
 eudcParser_for_statement_return
      peudcParser->for_statement(peudcParser)
 *  - 
 eudcParser_preexp_return
      peudcParser->preexp(peudcParser)
 *  - 
 eudcParser_expr_1_return
      peudcParser->expr_1(peudcParser)
 *  - 
 eudcParser_arglist_return
      peudcParser->arglist(peudcParser)
 *  - 
 eudcParser_expr_2_return
      peudcParser->expr_2(peudcParser)
 *  - 
 eudcParser_expr_3_return
      peudcParser->expr_3(peudcParser)
 *  - 
 eudcParser_expr_4_return
      peudcParser->expr_4(peudcParser)
 *  - 
 eudcParser_expr_5_return
      peudcParser->expr_5(peudcParser)
 *  - 
 eudcParser_expr_6_return
      peudcParser->expr_6(peudcParser)
 *  - 
 eudcParser_expr_7_return
      peudcParser->expr_7(peudcParser)
 *  - 
 eudcParser_expr_8_return
      peudcParser->expr_8(peudcParser)
 *  - 
 eudcParser_expr_9_return
      peudcParser->expr_9(peudcParser)
 *  - 
 eudcParser_expr_return
      peudcParser->expr(peudcParser)
 *  - 
 eudcParser_expr_statement_return
      peudcParser->expr_statement(peudcParser)
 *  - 
 eudcParser_continue_statement_return
      peudcParser->continue_statement(peudcParser)
 *  - 
 eudcParser_break_statement_return
      peudcParser->break_statement(peudcParser)
 *  - 
 eudcParser_return_statement_return
      peudcParser->return_statement(peudcParser)
 *  - 
 eudcParser_program_return
      peudcParser->program(peudcParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_eudcParser_H
#define _eudcParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct eudcParser_Ctx_struct eudcParser, * peudcParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct eudcParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_statement_return;



typedef struct eudcParser_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_block_return;



typedef struct eudcParser_fdecl_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_fdecl_statement_return;



typedef struct eudcParser_fdef_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_fdef_statement_return;



typedef struct eudcParser_argdef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_argdef_return;



typedef struct eudcParser_vardecl_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_vardecl_statement_return;



typedef struct eudcParser_vardecl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_vardecl_return;



typedef struct eudcParser_if_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_if_statement_return;



typedef struct eudcParser_while_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_while_statement_return;



typedef struct eudcParser_for_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_for_statement_return;



typedef struct eudcParser_preexp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_preexp_return;



typedef struct eudcParser_expr_1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_expr_1_return;



typedef struct eudcParser_arglist_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_arglist_return;



typedef struct eudcParser_expr_2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_expr_2_return;



typedef struct eudcParser_expr_3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_expr_3_return;



typedef struct eudcParser_expr_4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_expr_4_return;



typedef struct eudcParser_expr_5_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_expr_5_return;



typedef struct eudcParser_expr_6_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_expr_6_return;



typedef struct eudcParser_expr_7_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_expr_7_return;



typedef struct eudcParser_expr_8_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_expr_8_return;



typedef struct eudcParser_expr_9_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_expr_9_return;



typedef struct eudcParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_expr_return;



typedef struct eudcParser_expr_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_expr_statement_return;



typedef struct eudcParser_continue_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_continue_statement_return;



typedef struct eudcParser_break_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_break_statement_return;



typedef struct eudcParser_return_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_return_statement_return;



typedef struct eudcParser_program_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    eudcParser_program_return;




/** Context tracking structure for 
eudcParser

 */
struct eudcParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     eudcParser_statement_return
     (*statement)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_block_return
     (*block)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_fdecl_statement_return
     (*fdecl_statement)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_fdef_statement_return
     (*fdef_statement)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_argdef_return
     (*argdef)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_vardecl_statement_return
     (*vardecl_statement)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_vardecl_return
     (*vardecl)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_if_statement_return
     (*if_statement)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_while_statement_return
     (*while_statement)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_for_statement_return
     (*for_statement)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_preexp_return
     (*preexp)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_expr_1_return
     (*expr_1)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_arglist_return
     (*arglist)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_expr_2_return
     (*expr_2)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_expr_3_return
     (*expr_3)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_expr_4_return
     (*expr_4)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_expr_5_return
     (*expr_5)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_expr_6_return
     (*expr_6)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_expr_7_return
     (*expr_7)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_expr_8_return
     (*expr_8)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_expr_9_return
     (*expr_9)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_expr_return
     (*expr)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_expr_statement_return
     (*expr_statement)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_continue_statement_return
     (*continue_statement)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_break_statement_return
     (*break_statement)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_return_statement_return
     (*return_statement)	(struct eudcParser_Ctx_struct * ctx);

     eudcParser_program_return
     (*program)	(struct eudcParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct eudcParser_Ctx_struct * ctx);
    void	    (*free)   (struct eudcParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API peudcParser eudcParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API peudcParser eudcParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__11      11
#define T__12      12
#define T__13      13
#define T__14      14
#define T__15      15
#define T__16      16
#define T__17      17
#define T__18      18
#define T__19      19
#define T__20      20
#define T__21      21
#define T__22      22
#define T__23      23
#define T__24      24
#define T__25      25
#define T__26      26
#define T__27      27
#define T__28      28
#define T__29      29
#define T__30      30
#define T__31      31
#define T__32      32
#define T__33      33
#define T__34      34
#define T__35      35
#define T__36      36
#define T__37      37
#define T__38      38
#define T__39      39
#define T__40      40
#define T__41      41
#define T__42      42
#define T__43      43
#define T__44      44
#define T__45      45
#define T__46      46
#define T__47      47
#define T__48      48
#define T__49      49
#define T__50      50
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__59      59
#define T__60      60
#define T__61      61
#define LONGCOMMENT      4
#define NAME      5
#define NUMBER      6
#define SHORTCOMMENT      7
#define SPACE      8
#define STRING      9
#define VARTYPE      10
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for eudcParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
